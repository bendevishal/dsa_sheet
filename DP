Subset Sum Problem(gfg)
Difficulty: MediumAccuracy: 32.0%Submissions: 372K+Points: 4
Given an array of positive integers arr[] and a value sum, determine if there is a subset of arr[] with sum equal to given sum.      *********

Examples:

Input: arr[] = [3, 34, 4, 12, 5, 2], sum = 9
Output: true 
Explanation: Here there exists a subset with target sum = 9, 4+3+2 = 9.
Input: arr[] = [3, 34, 4, 12, 5, 2], sum = 30
Output: false
Explanation: There is no subset with target sum 30.
Input: arr[] = [1, 2, 3], sum = 6
Output: true
Explanation: The entire array can be taken as a subset, giving 1 + 2 + 3 = 6.
Constraints:
1 <= arr.size() <= 200
1<= arr[i] <= 200
1<= sum <= 104

SOlution:
class Solution {

    static Boolean[][] memo;

    public static boolean isSubsetSum(int[] arr,int sum) {
        int n=arr.length;
        memo = new Boolean[n + 1][sum + 1];
        return helper(arr, n, sum);
    }

    private static boolean helper(int[] arr, int n, int sum) {
        if (sum == 0) return true;
        if (n == 0) return false;

        if (memo[n][sum] != null) return memo[n][sum];

        if (arr[n - 1] > sum) {
            memo[n][sum] = helper(arr, n - 1, sum);
        } else {
            memo[n][sum] = helper(arr, n - 1, sum) || helper(arr, n - 1, sum - arr[n - 1]);
        }

        return memo[n][sum];
    }

    
    
}
*************************************************************************************************************************************************************************************
72. Edit Distance
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Solution:
class Solution {
  public int minDistance(String word1, String word2) {
    final int m = word1.length();
    final int n = word2.length();
    int[][] dp = new int[m + 1][n + 1];

    for (int i = 1; i <= m; ++i)
      dp[i][0] = i;

    for (int j = 1; j <= n; ++j)
      dp[0][j] = j;

    for (int i = 1; i <= m; ++i)
      for (int j = 1; j <= n; ++j)
        if (word1.charAt(i - 1) == word2.charAt(j - 1))
          dp[i][j] = dp[i - 1][j - 1];
        else
          dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) + 1;                  

    return dp[m][n];
  }
}
************************************************************************************************************************************************
