# Linked List Cycle Detection

This file contains a solution to detect cycles in a linked list. 

## Problem Statement

Given the head of a linked list, determine if the linked list has a cycle in it.  
There is a cycle if there is some node that can be reached again by continuously following the `next` pointer.

## Solution

  The implementation uses Floyd's Cycle Detection Algorithm (Tortoise and Hare) to detect cycles efficiently.

  static boolean hasCycle(SinglyLinkedListNode head) {
        if(head==null ||head.next==null) return false;
        SinglyLinkedListNode temp=head;
        SinglyLinkedListNode slow=temp;
        
        SinglyLinkedListNode fast=temp.next;
        while(slow!=fast){
            if(fast==null || fast.next==null) return false;
            slow=slow.next;
            fast=fast.next.next;
            
        }
        return true;
        
    }

61. Rotate List

Given the head of a linked list, rotate the list to the right by k places.
Solution:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) {
            return head;
        }

        int length = 1;
        ListNode temp = head;

        while (temp.next != null) {
            temp = temp.next;
            length++;
        }

        temp.next = head;
        k = k % length;
        k = length - k;

        while (k-- > 0) {
            temp = temp.next;
        }

        head = temp.next;
        temp.next = null;

        return head;
    }
}
********************************************************************************************************************************8
