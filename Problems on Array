1. Remove Duplicates from Sorted Array

Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. 
The relative order of the elements should be kept the same. Then return the number of unique elements in nums.
Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:
Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially.
The remaining elements of nums are not important as well as the size of nums.
Return k.

Custom Judge:
The judge will test your solution with the following code:
int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length
int k = removeDuplicates(nums); // Calls your implementation
assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

 

Example 1:
Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores)

Example 2:
Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
 

Constraints:
1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
nums is sorted in non-decreasing order.

Solution:
class Solution {
    public int removeDuplicates(int[] nums) {
    
        int i=0;
        for(int j=1;j<nums.length;j++){
            if(nums[i]!=nums[j]){
                i++;
                nums[i]=nums[j];
            }

        }
        return i+1;

        }
        
        
    }
***********************************************************************************************************************************************
2. Rotate Array
Hint
Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.


Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 
Constraints:
1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105

Follow up:
Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
Could you do it in-place with O(1) extra space?

Solution:
class Solution {
    public void rotate(int[] nums, int k) {
        int n=nums.length;
        int arr[]=new int[n];
        int j=0;
        int z=k%n;
        for(int i=n-z;i<n;i++){
            arr[j]=nums[i];
            j++;
        }
        int i=0;
        
        for(int l=z;l<n;l++){
            arr[l]=nums[i];
            i++;
        }
        for(int m=0;m<n;m++){
            nums[m]=arr[m];
        }
    }
}
***********************************************************************************************************************************************
3. Move Zeroes
Hint
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.


Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:
Input: nums = [0]
Output: [0]
 
Constraints:
1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1

Solution:
class Solution {
    public void moveZeroes(int[] nums) {
        int i=0;int j=1;
        int n=nums.length;
        while(j<n){
            if(nums[i]!=0)
            i++;
            if(nums[i]==0 &&nums[j]!=0){
                int temp=nums[i];
                nums[i]=nums[j];
                nums[j]=temp;
                i++;
            }
            j++;   
        }
        
    }
}


***********************************************************************************************************************************************
4.  Missing Number
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
 

Constraints:
n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
All the numbers of nums are unique.
Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?

Solution:
class Solution {
    public int missingNumber(int[] nums) {
        int sum=0;
        int n=nums.length;
        for(int i:nums){
            sum+=i;
        }
        return (n*(n+1)/2-sum);
    }
}
***********************************************************************************************************************************************
5.485. Max Consecutive Ones

Hint
Given a binary array nums, return the maximum number of consecutive 1's in the array.

Example 1:
Input: nums = [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.

Example 2:
Input: nums = [1,0,1,1,0,1]
Output: 2
 

Constraints:
1 <= nums.length <= 105
nums[i] is either 0 or 1.

Soluttion:
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int maxlength = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
                count++;
                if (count > maxlength) {
                    maxlength = count;

                }

            } else {
                count = 0;
            }
        }

        return maxlength;
    }
}
***********************************************************************************************************************************************\
6.
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

 
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
 
Constraints:
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109

Solution:
class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        int n =nums.length;
        for (int i = 0; i <n; i++) {
            for (int j = 0; j < n; j++) {
                if(i!=j){
                if (target == nums[i] + nums[j]) {
                    return new int[]{i,j};
                    
                }
            }
        }
    }return new int[]{};
    }  
}

*********************************************************************************************************************************************************************
7.
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

 
Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.

Solution:
class Solution {
    public void sortColors(int[] nums) {
        int count[]=new int[3];
        for(int i=0;i<nums.length;i++){
            count[nums[i]]++;
        }
        int k=0;
        for(int i=0;i<3;i++){
            int occ=count[i];
            for(int j=0;j<occ;j++)
            nums[k++]=i;
        }
    
        
        
    }
}
*************************************************************************************************************************
8.2149. Rearrange Array Elements by Sign

You are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.
You should return the array of nums such that the the array follows the given conditions:

Every consecutive pair of integers have opposite signs.
For all integers with the same sign, the order in which they were present in nums is preserved.
The rearranged array begins with a positive integer.
Return the modified array after rearranging the elements to satisfy the aforementioned conditions.

 
Example 1:
Input: nums = [3,1,-2,-5,2,-4]
Output: [3,-2,1,-5,2,-4]
Explanation:
The positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].
The only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].
Other ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.  

Example 2:
Input: nums = [-1,1]
Output: [1,-1]
Explanation:
1 is the only positive integer and -1 the only negative integer in nums.
So nums is rearranged to [1,-1].
 

Constraints:

2 <= nums.length <= 2 * 105
nums.length is even
1 <= |nums[i]| <= 105
nums consists of equal number of positive and negative integers.

Solution:
class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n=nums.length;
        int arr[]=new int[n];
        int j=0; int k=n/2;
        for(int i=0;i<n;i++){
            if(nums[i]>0){
            arr[j]=nums[i];
            j++;
            }
            else{
            arr[k]=nums[i];
            k++;
            }
        }
        int l=0;int m=n/2;
        for(int i=0;i<n;i++){
            if(i%2==0){
                nums[i]=arr[l];
                l++;
            }
            else{
                nums[i]=arr[m];
                m++;
            }
            
        }
        return nums;
        
    }
}
*************************************************************************************************************************
8.2418. Sort the People

You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.
For each index i, names[i] and heights[i] denote the name and height of the ith person.
Return names sorted in descending order by the people's heights.

 
Example 1:

Input: names = ["Mary","John","Emma"], heights = [180,165,170]
Output: ["Mary","Emma","John"]
Explanation: Mary is the tallest, followed by Emma and John.

Example 2:

Input: names = ["Alice","Bob","Bob"], heights = [155,185,150]
Output: ["Bob","Alice","Bob"]
Explanation: The first Bob is the tallest, followed by Alice and the second Bob.
 

Constraints:

n == names.length == heights.length
1 <= n <= 103
1 <= names[i].length <= 20
1 <= heights[i] <= 105
names[i] consists of lower and upper case English letters.
All the values of heights are distinct.

Solution:
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        int copy[]=new int[heights.length];
        int n=heights.length;
        for(int i=0;i<heights.length;i++){
            copy[i]=heights[i];
        }
        int arr[]=new int[n];
        int k=0;
        Arrays.sort(heights);
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<n;j++){

            
            if(heights[i]==copy[j])
             arr[k++]=j;

            }
        }
        String ans[]=new String[n];
        for(int i=0;i<n;i++){
            ans[i]=names[arr[i]];
        }
        return ans;
    }
}

*************************************************************************************************************************
9.1636. Sort Array by Increasing Frequency
Given an array of integers nums, sort the array in increasing order based on the frequency of the values.
If multiple values have the same frequency, sort them in decreasing order.
Return the sorted array.

 
Example 1:
Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.

Example 2:
Input: nums = [2,3,1,3,2]
Output: [1,3,3,2,2]
Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.

Example 3:
Input: nums = [-1,1,-6,4,5,-6,1,4,1]
Output: [5,-1,4,4,-6,-6,1,1,1]
 

Constraints:

1 <= nums.length <= 100
-100 <= nums[i] <= 100
Solution:

class Solution {
    public int[] frequencySort(int[] nums) {
        int n = nums.length;
        int fre[] = new int[201];
        for (int i = 0; i < n; i++) {
            fre[100 + nums[i]]++;
        }
        int j = 0;
        int arr[]=new int[n];
        for (int k = 1; k <= 100; k++) {
            for (int i = 200; i >= 0; i--) {
                if (fre[i] == k) {
                    for (int l = k; l > 0; l--) {
                        arr[j++] = i - 100;
                    }
                }
            }
        }
        return arr;
    }

}

*************************************************************************************************************************
10.451. Sort Characters By Frequency
Given a string s, sort it in decreasing order based on the frequency of the characters. 
The frequency of a character is the number of times it appears in the string.
Return the sorted string. If there are multiple answers, return any of them.


Example 1:
Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.

Example 2:
Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.

Example 3:
Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.

Solution:
class Solution {
    public String frequencySort(String s) {
        int fre[]=new int [123];
        int n=s.length();
        for(int i=0;i<n;i++){
            fre[s.charAt(i)]++;
        }
        char arr[]=new char[n];
        int l=0;
        for(int i=n;i>0;i--){
            for(int j=0;j<123;j++){
                if(fre[j]==i){
                    for(int k=i;k>0;k--){
                        arr[l++]=(char)j;
                    }
                }
            }
        }
        String p=new String(arr);
        return p;

        
    }
}
*************************************************************************************************************************
