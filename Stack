Celebrity Problem:
A celebrity is a person who is known to all but does not know anyone at a party. A party is being organized by some people. A square matrix mat[][] (n*n) is used to represent people at the party such that if an element of row i and column j is set to 1 it means ith person knows jth person. You need to return the index of the celebrity in the party, if the celebrity does not exist, return -1.

Note: Follow 0-based indexing.

Examples:

Input: mat[][] = [[1, 1, 0], [0, 1, 0], [0, 1, 1]]
Output: 1
Explanation: 0th and 2nd person both know 1st person. Therefore, 1 is the celebrity person. 
Input: mat[][] = [[1, 1], [1, 1]]
Output: -1
Explanation: Since both the people at the party know each other. Hence none of them is a celebrity person.
Input: mat[][] = [[1]]
Output: 0
Constraints:
1 <= mat.size()<= 1000
0 <= mat[i][j]<= 1
mat[i][i] == 1

Solution:
class Solution {
    public static boolean knows(int mat[][],int a, int b) {
        return mat[a][b] == 1;
    }
    public int celebrity(int mat[][]) {
        // code here
    int n=mat.length;

        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < n; i++) {
            stack.push(i);
        }

        while (stack.size() > 1) {
            int a = stack.pop();
            int b = stack.pop();

            if (knows(mat,a, b)) {
                stack.push(b);
            } else {
                stack.push(a);
            }
        }

        if (stack.isEmpty()) 
        return -1;

        int candidate = stack.pop();

        for (int i = 0; i < n; i++) {
            if (i != candidate) {
                if (knows(mat,candidate, i) || !knows(mat,i, candidate)) {
                    return -1;
                }
            }
        }

        return candidate;
    
    
    }
}
************************************************************************************************************************************************************************************************************
155. Min Stack

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.

 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

Solution:
class MinStack {
    public Stack<Integer> stac;
    public Stack<Integer> minStac;

    public MinStack() {
        stac = new Stack<>();
        minStac = new Stack<>();
    }
    
    public void push(int val) {
        stac.push(val);
        if (minStac.isEmpty() || val<=minStac.peek()) {
            minStac.push(val);
        }
    }
    
    public void pop() {
        int a = minStac.peek();
        if (stac.pop()==a) {
            minStac.pop();
        }
    }
    
    public int top() {
        return stac.peek();
    }
    
    public int getMin() {
        return minStac.peek();
    }
}


/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
*****************************************************************************************************************************************************************************************************************
